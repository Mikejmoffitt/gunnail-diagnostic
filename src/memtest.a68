; Routines for generic memory check.

	ORG	LAST_ROM

	.align	2

; a0.l = base test address
; a1.l = return ptr
; a2.l = region string
; a3.l = VRAM print location
; a4.l = end address (not to be tested)
; d0.w = test value
; clobbers d1
; Z flag set if test is ok (bne after for success case)
memtest_region_no_wram:
	; Print label
	move.w	d0, d1
	clr.w	d0
.print_top:
	move.b	(a2)+, d0
	beq	.print_finished
	move.w	d0, (a3)+
	bra	.print_top

.print_finished:
.test_top:
	cmpa.l	a0, a4
	beq	.test_ok

	move.w	d1, (a0)
	cmp.w	(a0), d1
	bne	.test_ng
	lea	2(a0), a0
	bra	.test_top

	clr.w	d0
.test_ng:
	move.w	#$1000, d0  ; Red
	move.w	#"NG", d1
	lea	(ng_str).l, a2
	bra	.print_result_top
.test_ok:
	move.w	#$2000, d0  ; Green
	move.w	#"OK", d1
	lea	(ok_str).l, a2
.print_result_top:
	move.b	(a2)+, d0
	beq	.finish
	move.w	d0, (a3)+
	bra	.print_result_top

.finish:
	cmp.w	#"NG", d1
	jmp (a1)

; a0.l = base test address
; a1.l = end address (not to be tested)
; a2.l = region string
; d0.w = test value
; Z flag set if test is ok (bne after for success case)
; Uses PrintVramAddr for messages
memtest_region:
	; Print label
	move.w	d0, -(sp)
	movem.l	a0-a1, -(sp)
	move.l	a2, a0  ; Title string
	move.l	PrintVramAddr, a1  ; VRAM address
	clr.w	d0  ; Normal attr
	jsr	print_str

	; We are done with A2 so use it to store print addr
	move.l	a1, a2

	movem.l	(sp)+, a0-a1
	move.w	(sp)+, d0

.test_top:
	cmpa.l	a0, a1
	beq	.test_ok

	move.w	d0, (a0)
	cmp.w	(a0), d0
	bne	.test_ng
	lea	2(a0), a0
	bra	.test_top

	clr.w	d0
.test_ng:
	move.w	#$1000, d0  ; Red
	move.w	#"NG", d1
	move.l	a2, a1  ; Stored print address
	lea	(ng_str).l, a0
	bra	.print_result

.test_ok:
	move.w	#$2000, d0  ; Green
	move.w	#"OK", d1
	move.l	a2, a1  ; Stored print address
	lea	(ok_str).l, a0

.print_result:
	jsr	print_str

.finish:
	move.l	PrintVramAddr, d0
	sub.w	#$0040, d0
	move.l	d0, PrintVramAddr
	cmp.w	#"NG", d1
	rts

; a0.l = base test address
memtest_64k_size_check:
	; d0 used to hold uniqe value to read/write from RAM
	clr.l	d1
	move.w	#$0002, d1  ; Offset for address line A1
	move.w	#$0000, d2  ; Address line, starting at A1

.size_test_top:
	; A1 holds WRAM address with single address bit set
	move.l	a0, a1
	add.l	d1, a1

	; Write unique value to base
	move.w	d1, d0
	eori.w	#$AAAA, d0
	move.w	d0, (a0)

	; Write another unique value to offset in memory
	eori.w	#$FFFF, d0
	move.w	d0, (a1)

	; Check that offset write didn't affect base
	move.w	(a0), d3
	cmp.w	d0, d3
	bne	.next_line

.line_error:
	; The line caused the address to alias; print error.
	lea	addr_line_str_tbl, a0  ; String table
	move.l	(a0, d2), a0  ; String for index d4

	lea	PrintVramAddr, a1
	clr.w	d0
	jsr	print_str

	lea	ng_str, a0
	move.w	#$1000, d0
	jmp	print_str

.forever:
	bra	.forever

.next_line:
	lsl.w	#1, d1  ; Move to next address line
	addi.w	#1, d2  ; Increment test index for sake of error printing
	cmp.w	#$0F, d2
	bne	.size_test_top

; Print result
	lea	wram_size_ok_str, a0
	move.l	PrintVramAddr, a1
	move.w	#$0000, d0
	jsr	print_str

	lea	ok_str, a0
	move.w	#$2000, d0
	jsr	print_str
	move.l	PrintVramAddr, d0
	sub.w	#$0040, d0
	move.l	d0, PrintVramAddr
	rts


LAST_ROM	:=	*
