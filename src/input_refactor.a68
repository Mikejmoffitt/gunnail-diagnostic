; Replacement input reader that removes duplicate code and maps button 3 to
; button 1. This refactor was done to free up a few bytes that were going to
; be used for an autofire routine, but that ended up not being necessary.
	ORG	$00C5EE

switch_copy:
	btst	#7, (GameSt).l
	beq.w	.run_demo
	move.w	(LEVER_IN).l, d7
	not.w	d7
	movea.l	#P1Mvw, a6
	bsr	switch_copy_sub
	lsr.w	#8, d7
	movea.l	#P2Mvw, a6
	bsr	switch_copy_sub
	rts

.run_demo:
	movea.l	#P1Mvw, a6
	movea.l	#P2Mvw, a5
	bra	$C688

; d7.b: input state.
; PxMvw in a6.
; Labels and comments taken from original source
switch_copy_sub:
	move.w	d7, -(sp)
	tst.w	PlayerMv_DeadFlag(a6)  ; Now dead?
	beq	.nclr2
	clr.b	d6

.nclr2:
	tst.w	$58(a6)
	beq	.nclr3
	tst.w	6(a6)
	bpl	.nclr3
	move.b	#1, d7  ; kyousei right
	btst	#1, (StgCtr+1).l
	bne	.nclr3
	move.b	#2, d7  ; kyousei left

.nclr3:
	cmpi.w	#StWait-30, $2C(a6)
	bcs	.ok_1
	andi.w	#$0F, d7  ; lever only
.ok_1:
	btst	#6, d7  ; button 3, probably
	beq	.no_b3
	bset	#4, d7  ; set button 1 if 3 is held
.no_b3:
	andi.w	#$3F, d7
	move.w	d7, PlayerMv_SwitchData(a6)

	move.w	(sp)+, d7
	rts
